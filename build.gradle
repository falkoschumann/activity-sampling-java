/*
 * Activity Sampling
 * Copyright (c) 2022 Falko Schumann <falko.schumann@muspellheim.de>
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
  id 'checkstyle'
  id 'jacoco'
  id 'java'
  id 'com.diffplug.spotless' version '6.21.0'
  id 'org.beryx.jlink' version '2.26.0'
  id 'org.openjfx.javafxplugin' version '0.0.14'
}

group 'de.muspellheim'
version '1.3.0'

ext {
  copyrightYear = LocalDate.now().year
}

repositories {
  mavenCentral()
}

dependencies {
  implementation "com.h2database:h2:2.2.220"
  implementation 'org.apache.commons:commons-csv:1.10.0'
  compileOnly 'org.projectlombok:lombok:1.18.28'
  annotationProcessor 'org.projectlombok:lombok:1.18.28'
  testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
  testCompileOnly 'org.projectlombok:lombok:1.18.28'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'
}

application {
  mainModule = 'de.muspellheim.activitysampling'
  mainClass = 'de.muspellheim.activitysampling.ui.ActivitySamplingApplication'
}

java {
  sourceCompatibility = 17
  compileJava {
    options.release = 17
    options.encoding = 'utf-8'
    options.compilerArgs.addAll(['-Xlint:all,-requires-automatic,-processing,-serial', '-Werror', '-implicit:class'])
  }
  compileTestJava {
    options.release = 17
    options.encoding = 'utf-8'
    options.compilerArgs.addAll(['-Xlint:all,-processing,-serial', '-Werror', '-implicit:class'])
  }
}

javafx {
  version = "20.0.1"
  modules = ['javafx.controls', 'javafx.fxml']
}

test {
  useJUnitPlatform()
  testLogging {
    events 'passed', 'skipped', 'failed'
    showExceptions = true
    exceptionFormat 'full'
  }
  finalizedBy jacocoTestReport
}

jacocoTestReport {
  dependsOn test
  reports {
    xml.required = true
  }
}

checkstyle {
  toolVersion = "10.12.2"
  var archive = configurations.checkstyle.filter {
    it.name.startsWith("checkstyle")
  }
  config = resources.text.fromArchiveEntry(archive, "google_checks.xml")
  configProperties 'org.checkstyle.google.suppressionfilter.config': file('config/checkstyle-suppressions.xml')
  maxWarnings = 0
}

spotless {
  java {
    googleJavaFormat()
    licenseHeaderFile 'config/LicenseHeader.txt'
  }
  groovyGradle {
    licenseHeaderFile('config/LicenseHeader.txt', 'plugins|import|rootProject')
  }
}

jlink {
  options = [
    '--compress', '2',
    '--include-locales', 'de,en',
    '--no-header-files',
    '--no-man-pages',
    '--strip-native-commands',
    '--strip-debug',
  ]
  jpackage {
    imageOptions += [
      '--vendor', 'Muspellheim',
    ]
    installerOptions = [
      '--license-file', "$rootDir/LICENSE.txt",
    ]
  }
}

if (Os.isFamily(Os.FAMILY_MAC)) {
  jlink {
    jpackage {
      icon = "$projectDir/src/main/macos/app-icon.icns"
      imageName = 'Activity Sampling'
      imageOptions += [
        '--copyright', "Copyright Â© ${copyrightYear} Falko Schumann",
        '--mac-sign',
        '--mac-signing-key-user-name', 'Falko Schumann (QC6EN37P56)',
        '--resource-dir', "$projectDir/src/main/macos",
      ]
      installerName = project.name + (Os.isArch("aarch64") ? "-m1" : "-intel")
      installerType = 'dmg'
    }
  }
}

if (Os.isFamily(Os.FAMILY_WINDOWS)) {
  jlink {
    jpackage {
      icon = "$projectDir/src/main/win/app-icon.ico"
      imageName = 'Activity Sampling'
      imageOptions = [
        '--copyright', "Copyright (c) ${copyrightYear} Falko Schumann",
        '--resource-dir', "$projectDir/src/main/win",
      ]
      installerName = project.name
      installerType = 'msi'
      installerOptions = [
        '--copyright', "Copyright (c) ${copyrightYear} Falko Schumann",
        '--win-dir-chooser',
        '--win-menu',
        '--win-menu-group', 'Muspellheim',
        '--win-upgrade-uuid', '755510a8-d4c0-4517-94a9-6c6a1d95bfd6'
      ]
    }
    launcher {
      name = project.name
    }
  }
}
